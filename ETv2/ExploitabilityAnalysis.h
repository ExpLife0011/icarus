/*
Copyright (C) 2013  George Nicolaou <george[at]preaver.[dot]com>
Copyright (C) 2013  Glafkos Charalambous <glafkos[at]gmail.[dot]com>

This file is part of Exploitation Toolkit Icarus (ETI) Library.

Exploitation Toolkit Icarus (ETI) Library is free software: you can redistribute 
it and/or modify it under the terms of the GNU General Public License as 
published by the Free Software Foundation, either version 3 of the License, 
or (at your option) any later version.

Exploitation Toolkit Icarus (ETI) Library is distributed in the hope that it 
will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Exploitation Toolkit Icarus (ETI) Library.  
If not, see <http://www.gnu.org/licenses/>.
*/

#pragma once
#include "icarus_include.h"
#include "IDebugger.h"
using namespace std;
#include <vector>
#include "IVulnerability.h"
#include "FuzzingPayload.h"

class LIBEXPORT ExploitabilityAnalysis
{
public:
	ExploitabilityAnalysis(void);
	~ExploitabilityAnalysis(void);
	/*
	** Runs a vulnerability analysis on the given debugged program for
	** vulnerabilities specified by the dwVulnModules variable
	** Arguments:
	**	IDebugger * - A pointer to the module handling the debugging of the
	**	target application.
	**
	**	vector<IVulnerability*> - An empty vector that receives the possible
	**	vulnerabilities found for this program
	**
	**	VULNERABILITY_TYPE - VULNERABILITY_X flag values specifying which 
	**	vulnerability modules to run against this program.
	**
	** Returns:
	**	TRUE - If one or more vulnerabilities are found.
	**	FALSE - If no vulnerabilities are found.
	*/
	BOOL run_vulnerability_classification( IDebugger *, 
		vector<IVulnerability*> * );
	BOOL run_exploitability_analysis( IDebugger *, IVulnerability * );
	BOOL run_skeleton_implementation( IDebugger *, IVulnerability * );
	BOOL run_implementation_analysis( IDebugger *, IVulnerability * );

	void enable_vulnerability_modules( VULNERABILITY_TYPE dwModules );
	

	//BOOL run_analysis( ExecutionMonitor * lpExecMonitor, DWORD dwFlags );

private:
	vector<IVulnerability *> vlpobjVulnerabilitiesFound;
	vector<IVulnerability *> vlpobjEnabledVulnerabilities;
	
};