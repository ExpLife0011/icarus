/*
Copyright (C) 2013  George Nicolaou <george[at]preaver.[dot]com>
Copyright (C) 2013  Glafkos Charalambous <glafkos[at]gmail.[dot]com>

This file is part of Exploitation Toolkit Icarus (ETI) Library.

Exploitation Toolkit Icarus (ETI) Library is free software: you can redistribute 
it and/or modify it under the terms of the GNU General Public License as 
published by the Free Software Foundation, either version 3 of the License, 
or (at your option) any later version.

Exploitation Toolkit Icarus (ETI) Library is distributed in the hope that it 
will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Exploitation Toolkit Icarus (ETI) Library.  
If not, see <http://www.gnu.org/licenses/>.
*/

#pragma once
using namespace std;
#include "icarus_include.h"
#include "IDebugger.h"
//#include "FuzzingPayload.h"
#include "Payload.h"

typedef enum {
	VULNERABILITY_0		= 0x00000001,
	VULNERABILITY_1		= 0x00000002,
	VULNERABILITY_2		= 0x00000004,
	VULNERABILITY_3		= 0x00000008,
	VULNERABILITY_ALL	= 0xFFFFFFFF
} VULNERABILITY_TYPE;

class LIBEXPORT IVulnerability
{
public:
	IVulnerability(void);
	~IVulnerability(void);
	static void get_platform_vulnerabilities( 
		vector<IVulnerability *> * lpvobjVulnerabilities, 
		unsigned long ulVulnerabilities );
	virtual VULNERABILITY_TYPE get_vulnerability_type() = NULL;
	virtual char * get_vulnerability_name() = NULL;
	virtual BOOL check_for_vulnerability( IDebugger * ) = NULL;
	virtual BOOL run_vulnerability_analysis( IDebugger * ) = NULL;
	virtual BOOL run_skeleton_implementation( IDebugger * ) = NULL;
	virtual double get_vulnerability_score() = NULL;
	virtual Payload * get_payload() = NULL;

	/*
	//These vulnerability types should be handled by a platform specific module
	//which when called should return the semantics of the vulnerability. Eg:
	//SEH overflow on windows should return number of consumed bytes until u can
	//execute code (POP POP RET = 3 bytes at best consumed, execute at static location
	// of a pop/pop/retn )
	IVulnerability(void);
	~IVulnerability(void);
	virtual char * get_vulnerability_name() = NULL;
	virtual BOOL check_for_vulnerability( IDebugger *, FuzzingPayload * ) = NULL;
	virtual BOOL run_vulnerability_analysis( IDebugger *, FuzzingPayload * ) = NULL;
	virtual VULNERABILITY_TYPE get_vulnerability_type() = NULL;
	*/
};

