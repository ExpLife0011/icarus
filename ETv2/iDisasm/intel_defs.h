/*
Copyright (C) 2013 George Nicolaou <george[at]preaver.[dot]com>

This file is part of Icarus Disassembly Engine (iDisasm).

Icarus Disassembly Engine (iDisasm) is free software: you can redistribute it
and/or modify it under the terms of the GNU Lesser General Public License as
published by the Free Software Foundation, either version 3 of the License,
or (at your option) any later version.

Icarus Disassembly Engine (iDisasm) is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General
Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Icarus Disassembly Engine (iDisasm). If not, see
<http://www.gnu.org/licenses/>.
*/

#ifndef _INTEL_DEFS_H
#define _INTEL_DEFS_H

typedef enum { 
	MODE_64BIT,
	AVX_16BIT_FP_CONVERSION,
	BINARY_ARITHMETIC,
	BIT_BYTE,
	CONTROL_FLAG,
	CONTROL_TRANSFER,
	DATA_TRANSFER,
	DECIMAL_ARITHMETIC,
	ENTER_LEAVE,
	FPU_ARITHMETIC,
	FPU_COMPARISON,
	FPU_CONTROL,
	FPU_DATA_TRANSFER,
	FPU_LOAD_CONSTANT,
	FPU_SIMD_STATE_MANAGEMENT,
	FPU_TRANSCENDENTAL,
	IO_INSTRUCTION,
	LOGICAL_ARITHMETIC,
	MISC_INSTRUCTION,
	MMX_COMPARISON,
	MMX_CONVERSION,
	MMX_DATA_TRANSFER,
	MMX_LOGICAL,
	MMX_PACKED_ARITHMETIC,
	MMX_SHIFT_ROTATE,
	MMX_STATE_MANAGEMENT,
	RANDOM_GENERATOR,
	SAFER_MODE_SMX,
	SEGMENT_REGISTER,
	SHIFT_ROTATE,
	SSE2_128BIT_SIMD_INTEGER,
	SSE2_CACHEABILITY_CONTROL_ORDERING,
	SSE2_COMPARE,
	SSE2_CONVERSION,
	SSE2_DATA_MOVEMENT,
	SSE2_LOGICAL,
	SSE2_PACKED_ARITHMETIC,
	SSE2_PACKED_SPFP,
	SSE2_SHUFFLE_UNPACK,
	SSE3_AGENT_SYNC,
	SSE3_INTEGER_CONVERSION,
	SSE3_SIMD_FLOAT_HORIZONTAL_ADDSUB,
	SSE3_SIMD_FLOAT_LOADMOVEDUPL,
	SSE3_SIMD_FLOAT_PACKED_ADDSUB,
	SSE3_SPEC_128_UNALIGNED_DATA_LOAD,
	SSE3_SUPPL_HORIZONTAL_ADDSUB,
	SSE3_SUPPL_MULTIPLYADDPACKED,
	SSE3_SUPPL_PACKED_ABS_VAL,
	SSE3_SUPPL_PACKED_ALIGN_RIGHT,
	SSE3_SUPPL_PACKED_MULTIPLY_HIGHROUNDSCALE,
	SSE3_SUPPL_PACKED_SHUFFLE_BYTES,
	SSE3_SUPPL_PACKED_SIGN,
	SSE4_1_DWORD_MULTIPLY,
	SSE4_1_DWORD_PACKING_WUSATURATION,
	SSE4_1_FP_DOTPRODUCT,
	SSE4_1_FP_ROUNDSELECTROUND,
	SSE4_1_HORIZONTAL_SEARCH,
	SSE4_1_INSERTION_EXTRACTION_MMX,
	SSE4_1_PACKED_BLENDING,
	SSE4_1_PACKED_INT_FORMAT_CONVERSION,
	SSE4_1_PACKED_INT_MINMAX,
	SSE4_1_PACKED_QWORD_EQUALITYCMP,
	SSE4_1_PACKED_TEST,
	SSE4_1_STREAMING_LOAD_HINT,
	SSE4_1_SUMS_ABS_DIFF_4BYTEBLK,
	SSE4_2_AESNIPCLMULQDQ,
	SSE4_2_APPLICATIONACCELERATOR,
	SSE4_2_PACKEDCMPSIMDINT,
	SSE4_2_STRINGTEXTPROCESSING,
	SSE_64BIT_SIMD_INTEGER,
	SSE_CACHEABILITY_CONTROL_PREFETCH_INSTR_ORDERING,
	SSE_COMPARISON,
	SSE_CONVERSION,
	SSE_DATA_TRANSFER,
	SSE_LOGICAL,
	SSE_MXCSR_STATE_MANAGEMENT,
	SSE_PACKED_ARITHMETIC,
	SSE_SHUFFLE_UNPACK,
	STRING_INSTRUCTIONS,
	SYSTEM_INSTRUCTION,
	VM_EXTENSIONS,
	AMD_3D
} ENUM_INSTRUCTION_CATEGORY;

typedef enum {
	ADDR_INVALID = 0,

	REG_RAX = 0x00000001, //RAX/EAX/AX
	REG_RCX = 0x00000002, //RCX/ECX/CX
	REG_RDX = 0x00000004, //RDX/EDX/DX
	REG_RBX = 0x00000008, //RBX/EBX/BX
	REG_RSP = 0x00000010, //RSP/ESP/SP
	REG_RBP = 0x00000020, //RBP/EBP/BP
	REG_RSI = 0x00000040, //RSI/ESI/SI
	REG_RDI = 0x00000080, //RDI/EDI/DI

	REG_EAX = 0x00000001,
	REG_ECX = 0x00000002,
	REG_EDX = 0x00000004,
	REG_EBX = 0x00000008,
	REG_ESP = 0x00000010,
	REG_EBP = 0x00000020,
	REG_ESI = 0x00000040,
	REG_EDI = 0x00000080,

	REG_AX = 0x00000001,
	REG_CX = 0x00000002,
	REG_DX = 0x00000004,
	REG_BX = 0x00000008,
	REG_SP = 0x00000010,
	REG_BP = 0x00000020,
	REG_SI = 0x00000040,
	REG_DI = 0x00000080,

	REG_AL = 0x00000001,
	REG_CL = 0x00000002,
	REG_DL = 0x00000004,
	REG_BL = 0x00000008,
	REG_SPL =	0x00000010,
	REG_BPL =	0x00000020,
	REG_SL = 0x00000040,
	REG_DIL = 0x00000080,

	REG_AH	= 0x00000100,
	REG_CH	= 0x00000200,
	REG_DH	= 0x00000400,
	REG_BH	= 0x00000800,
	REG_SPH	= 0x00001000,

	REG_ES	= 0x00010000,
	REG_CS	= 0x00020000,
	REG_SS	= 0x00040000,
	REG_DS	= 0x00080000,
	REG_FS	= 0x00100000,
	REG_GS	= 0x00200000,
	REG_EIP = 0x00400000,
	REG_RIP = 0x00400000,

	REG_CR_0	= 0x00000001,
	REG_CR_1	= 0x00000002,
	REG_CR_2	= 0x00000003,
	REG_CR_3	= 0x00000008,
	REG_CR_4	= 0x00000010,
	REG_CR_5	= 0x00000020,
	REG_CR_6	= 0x00000040,
	REG_CR_7	= 0x00000080,

	REG_DR_0	= 0x00000001,
	REG_DR_1	= 0x00000002,
	REG_DR_2	= 0x00000003,
	REG_DR_3	= 0x00000008,
	REG_DR_4	= 0x00000010,
	REG_DR_5	= 0x00000020,
	REG_DR_6	= 0x00000040,
	REG_DR_7	= 0x00000080,

	REG_MM0 = 0x00000001,
	REG_MM1 = 0x00000002,
	REG_MM2 = 0x00000004,
	REG_MM3 = 0x00000008,
	REG_MM4 = 0x00000010,
	REG_MM5 = 0x00000020,
	REG_MM6 = 0x00000040,
	REG_MM7 = 0x00000080,

	REG_XMM0 =0x00000001,
	REG_XMM1 =0x00000002,
	REG_XMM2 =0x00000004,
	REG_XMM3 =0x00000008,
	REG_XMM4 =0x00000010,
	REG_XMM5 =0x00000020,
	REG_XMM6 =0x00000040,
	REG_XMM7 =0x00000080,

	REG_YMM0 = 0x00000001,
	REG_YMM1 = 0x00000002,
	REG_YMM2 = 0x00000004,
	REG_YMM3 = 0x00000008,
	REG_YMM4 = 0x00000010,
	REG_YMM5 = 0x00000020,
	REG_YMM6 = 0x00000040,
	REG_YMM7 = 0x00000080,

	REG_ST0 = 0x00000001,
	REG_ST1 = 0x00000002,
	REG_ST2 = 0x00000004,
	REG_ST3 = 0x00000008,
	REG_ST4 = 0x00000010,
	REG_ST5 = 0x00000020,
	REG_ST6 = 0x00000040,
	REG_ST7 = 0x00000080,

	ADDR_ADDRESSING = 0x00000000,
	ADDR_GIVEN_IMMIDIATE = 0x40000000,
	ADDR_GIVEN = 0x80000000
	
} ENUM_INTEL_OPERAND_ADDRESSING;

#define OPERAND_ADDRESSING_TYPE_MASK 0xFF000000
#define OPERAND_ADDRESSING_MASK 0x00FFFFFF
#define OPERAND_ADDRESSING_LOW 0x000000FF
#define OPERAND_ADDRESSING_HIGH 0x0000FF00
#define OPERAND_ADDRESSING_SPECIAL 0x00FF0000
#define CHAR_BIT 8

typedef enum {
	INTEL_TYPE_REG_INVALID = 0x00000000,
	INTEL_TYPE_REG_GENERAL = 0x00000001,
	INTEL_TYPE_REG_MMX,
	INTEL_TYPE_REG_FPU,
	INTEL_TYPE_REG_SSE,
	INTEL_TYPE_REG_CR,
	INTEL_TYPE_REG_DR,
	INTEL_TYPE_REG_YMM,
	INTEL_TYPE_REG_MEMORYMANAGEMENT,
	INTEL_TYPE_REG_SEGMENT,
	INTEL_TYPE_REG_FLAGS
} ENUM_INTEL_REGISTER_TYPE;

typedef enum {
	INTEL_PREFIX_INVALID	= 0,
	INTEL_PREFIX_GRP1_LOCK		= 0x00000001,
	INTEL_PREFIX_GRP1_REPNE		= 0x00000002,
	INTEL_PREFIX_GRP1_REP		= 0x00000004,

	INTEL_PREFIX_GRP2_CS		= 0x00000100,
	INTEL_PREFIX_GRP2_BRANCHNT	= 0x00000100,
	INTEL_PREFIX_GRP2_SS		= 0x00000200,
	INTEL_PREFIX_GRP2_DS		= 0x00000400,
	INTEL_PREFIX_GRP2_BRANCHT	= 0x00000400,
	INTEL_PREFIX_GRP2_ES		= 0x00000800,
	INTEL_PREFIX_GRP2_FS		= 0x00001000,
	INTEL_PREFIX_GRP2_GS		= 0x00002000,

	INTEL_PREFIX_GRP3_OPSIZEOVERRIDE	= 0x00010000,
	INTEL_PREFIX_GRP4_ADDRSIZEOVERRIDE	= 0x00020000,
} ENUM_INTEL_PREFIXES;

#define INTEL_PREFIX_GRP2	0x0000FF00
#define INTEL_PREFIX_GRP1	0x000000FF
#define INTEL_PREFIX_GRP34	0x00FF0000


#endif //_INTEL_DEFS_H